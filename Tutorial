= Mini Tutorial


== Installation

* Installing the Exiftool command-line application from Phil Harvey
  (see http://www.sno.phy.queensu.ca/~phil/exiftool/install.html)
* Installing the Ruby library (<code>gem install mini_exiftool</code>)


== Lesson 1: Reading Meta Data

=== A Simple Example

 require 'rubygems'
 require 'mini_exiftool'

 photo = MiniExiftool.new 'photo.jpg'
 puts photo['DateTimeOriginal']


=== Smart Tag Names
In the example above we use <code>photo['DateTimeOriginal']</code> to
get the value for the time the photo was taken. But tag names are not
case sensitive and additional underlines are also irrelevant. So
following expressions are equivalent:
 photo['DateTimeOriginal']
 photo['datetimeoriginal']
 photo['date_time_original']


=== Nicer Access Via Dynamic Methods

Using the []-method is the safest way to access to values of tags
(e. g. Self-timer you can only access this way) but the smarter way is
using dynamic method access. You can write:
 photo.datetimeoriginal
or also
 photo.date_time_original


=== Value Types

Following types of values are at the moment supported:
* Array (e. g. SubjectLocation => 1504 1000 256 304)
* Fixnum (e. g. ISO => 400)
* Float (e. g. FNumber => 9.5) 
* String (e. g. Model => DYNAX 7D)
* Time (e. g. DateTimeOriginal => 2005:09:13 20:08:50)

The Exiftool command-line application has an option (-n) to get values
as numbers if possible, in MiniExiftool you can do this with setting
the <code>:numerical</code> option to +true+ while generating a new
instance with new or using the <code>numerical=</code>-method
combining with calling <code>reload</code>.

Let's look at an example:
 # standard: numerical is false
 photo = MiniExiftool.new 'photo.jpg'
 photo.exposure_time # => '1/60' (String)
 # now with numerical is true
 photo.numerical = true
 photo.reload
 photo.exposure_time # => 0.01666667 (Float)
This behaviour can be useful if you want to do calculations on the
value, if you only want to show the value the standard behaviour is
maybe better.

=== Further Example

For understanding reading access to meta data also have a look at the
example file <code>print_portraits.rb</code> in the +examples+
directory.

<b>TODO:</b> Describing the options <code>:composite</code> and
<code>:timestamps</code>!

== Lesson 2: Writing Meta Data


=== Also A Very Simple Example

 require 'rubygems'
 require 'mini_exiftool'

 photo = MiniExiftool.new 'photo.jpg'
 photo.comment = 'hello world'
 photo.save


=== Save Is Atomar

If you have changed serval values and call the +save+-method either
all changes will be written to the file or nothing. The return value
of the +save+-method is +true+ if all values are written to the file
otherwise save returns +false+. In the last case you can use the
+errors+-method which returns a hash of the tags which values couldn't
be writed with an error message for each of them.


=== Interesting Methods

Have a look at the <code>changed?</code>-method for checking if the
value of a specific tag is changed or a changing in general is
done. In the same way the +revert+-method reverts the value of a
specific tag or in general all changes.

You should also look at the rdoc information of MiniExiftool.

=== Further Example

See <code>shift_time.rb</code> in the +examples+ directory.
